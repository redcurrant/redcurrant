#ifndef __REDCURRANT__metautils_notifications__h
# define __REDCURRANT__metautils_notifications__h 1

#include <glib.h>
#include <metautils/lib/metautils.h>

struct metautils_notifier_s;
typedef struct metautils_notifier_s metautils_notifier_t;

/**
 * Allocate and initialize a notification handle.
 */
void metautils_notifier_init(metautils_notifier_t **notifier,
	const gchar *ns_name, struct grid_lbpool_s *lbpool);

/**
 * Clear a notification handle.
 */
void metautils_notifier_clear(metautils_notifier_t **notifier);

/**
 * Configure the notifier to send notifications to Kafka.
 *
 * @param notifier A notifier instance
 */
GError *metautils_notifier_init_kafka(metautils_notifier_t *notifier);

/**
 * Free the Kafka notifier only. Other notifiers will continue to work.
 */
void metautils_notifier_free_kafka(metautils_notifier_t *notifier);

/**
 * Create a Kafka topic instance, and add it to the cache.
 * This will speed up the notification process and avoid allocating a topic
 * on each call to metautils_notifier_send().
 */
GError *metautils_notifier_prepare_kafka_topic(metautils_notifier_t *notifier,
		 const gchar *topic_name);

/**
 * Send a raw notification to the specified topic.
 */
GError *metautils_notifier_send_raw(metautils_notifier_t *notifier,
	const gchar *topic, GByteArray *data);

/**
 * Send a JSON notification to the specifier topic. The template requires
 * a source address and a type, and includes an autogenerated sequence number.
 */
GError *metautils_notifier_send_json(metautils_notifier_t *notifier,
	const gchar *topic, const gchar *src_addr, const char *notif_type,
	const gchar *notif_data);

#endif // __REDCURRANT__metautils_notifications__h
